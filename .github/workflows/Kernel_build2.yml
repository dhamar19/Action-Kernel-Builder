name: Kernel Build 2

on:
  workflow_dispatch:
    inputs:
      BUILD_TITLE:
        description: 'Custom Build Title'
        default: Problematic Kernel Build
        required: false
      CODENAME:
        description: 'Device codename'
        default: rosemary
        required: true
      KERNEL_SOURCE:
        description: 'Kernel Source'
        default: https://github.com/agostino64/android_rosemary_meowX.git
        required: true
      KERNEL_SOURCE_BRANCH:
        description: 'Kernel Source Branch'
        required: true
      DEFCONFIG:
        description: 'Kernel Defconfig'
        required: true
      ANYKERNEL_URL:
        description: 'AnyKernel Url'
        default: https://github.com/dhamar19/AnyKernel3.git
        required: true
      ANYKERNEL_BRANCH:
        description: 'AnyKernel Branch (defaults to codename)'
        default: master
        required: true
      ENABLE_KERNELSU:
        description: 'KernelSU'
        type: boolean
        default: true

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    steps:

    - name: Display User Inputs
      run: |
        echo "::group::User Environment Variables"
        echo "Custom Build Title: ${{ github.event.inputs.BUILD_TITLE }}"
        echo "Codename: ${{ github.event.inputs.rosemary }}"
        echo "Kernel Source: ${{ github.event.inputs.KERNEL_SOURCE_URL }}/tree/${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}"
        echo "Kernel Defconfig: ${{ github.event.inputs.rosemary_defconfig }}"
        echo "AnyKernel Url: ${{ github.event.inputs.ANYKERNEL_URL }}/tree/${{ github.event.inputs.ANYKERNEL_BRANCH }}"
        echo "KernelSU: ${{ fromJSON('["No", "Yes"]')[github.event.inputs.ENABLE_KERNELSU | 1] }}"
        echo "::endgroup::"

    - name: Initialize workspace
      run: |
        mkdir workspace
        cd workspace

        echo "current_date=$(date +'%d %B %Y')" >> $GITHUB_OUTPUT
        echo "workspace-folder=$(pwd)" >> $GITHUB_OUTPUT
        echo "start_time=$(date +%s)" >> $GITHUB_OUTPUT
        echo "kernelsu=${{ fromJSON('["No", "Yes"]')[fromJSON(github.event.inputs.ENABLE_KERNELSU)] }}" >> $GITHUB_OUTPUT
        echo "build_title=${{ github.event.inputs.BUILD_TITLE || github.event.inputs.CODENAME }}" >> $GITHUB_OUTPUT
      id: workspace

    - name: Send Telegram notification for start build
      uses: appleboy/telegram-action@master
      env:
        TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        disable_web_page_preview: true
        message: |
          <b>${{ github.event.inputs.BUILD_TITLE }}</b>
          <b>⚒️Kernel Build Start⚒️</b>
          
          <b>📱 Device</b>: Redmi Note 10S
          <b>💾 Codename</b>: ${{ github.event.inputs.CODENAME }}
          <b>🏷️ Branch</b>: ${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}
          <b>🗓️ Date</b>: ${{ steps.workspace.outputs.current_date }}
          
          Build by @aditovayo
          
          <b>Action</b>: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        format: html

    - name: Prepare the build environment
      run: |
        sudo apt update -y && sudo apt upgrade -y && sudo apt-get install -y bc flex curl git zip ftp libncurses5 libssl-dev lftp zstd wget libfl-dev python2 python3 libarchive-tools gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
        curl -LSs "https://raw.githubusercontent.com/rsuntk/toolchains/refs/heads/README/clone.sh" | bash -s clang-11
        echo "tools-folder=$(pwd)" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.workspace.outputs.workspace-folder }}
      id: tools

    - name: Clone kernel source
      run: |
        git clone --depth=1 ${{ github.event.inputs.KERNEL_SOURCE }} -b ${{ github.event.inputs.KERNEL_SOURCE_BRANCH }} kernel_tree
        echo "kernel-folder=$(pwd)/kernel_tree" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.workspace.outputs.workspace-folder }}
      id: kernel

    - name: Adding KernelSU
      if: ${{ steps.workspace.outputs.kernelsu == 'Yes' }}
      run: |
        if [ -d "KernelSU" ]; then
          rm -rf "KernelSU"
        fi
        if [ -d "drivers/kernelsu" ]; then
          rm -rf "drivers/kernelsu"
        fi
        curl -LSs "https://raw.githubusercontent.com/ShirkNeko/SukiSU-Ultra/main/kernel/setup.sh" | bash -s susfs-dev
      working-directory: ${{ steps.kernel.outputs.kernel-folder }}

    - name: Building kernel
      run: |
        set -e
        export CLANGDIR="${{ steps.tools.outputs.tools-folder }}/clang-11"
        rm -f ${{ steps.kernel.outputs.kernel-folder }}/out/compile.log
        mkdir -p ${{ steps.kernel.outputs.kernel-folder }}/out

        export KBUILD_BUILD_USER="adito"
        export KBUILD_BUILD_HOST="vayooo"
        export USE_CCACHE=1
        export PATH="$CLANGDIR/bin:$PATH"

        make clean && make mrproper
        make O=out ARCH=arm64 ${{ github.event.inputs.DEFCONFIG }}_defconfig

        fulmen () {
         make -j$(nproc --all) O=out LLVM=1 LLVM_IAS=1 \
         ARCH=arm64 \
         CC=clang \
         LD=ld.lld \
         AR=llvm-ar \
         AS=llvm-as \
         NM=llvm-nm \
         STRIP=llvm-strip \
         OBJCOPY=llvm-objcopy \
         OBJDUMP=llvm-objdump \
         READELF=llvm-readelf \
         HOSTCC=clang \
         HOSTCXX=clang++ \
         HOSTAR=llvm-ar \
         HOSTLD=ld.lld \
         CROSS_COMPILE=aarch64-linux-gnu- \
         CROSS_COMPILE_ARM32=arm-linux-gnueabi-
        }

        fulmen 2>&1 | tee -a ${{ steps.kernel.outputs.kernel-folder }}/out/compile.log
        cp ${{ steps.kernel.outputs.kernel-folder }}/out/compile.log $GITHUB_WORKSPACE/
        echo "elapsed_time=$(echo "$(date +%s)"-"${{ steps.workspace.outputs.start_time }}" | bc)" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.kernel.outputs.kernel-folder }}
      id: build

    - name: AnyKernel3
      if: ${{ success() && github.event.inputs.ANYKERNEL_URL != '' }}
      run: |
        set -e
        if [[ -z "${{ github.event.inputs.ANYKERNEL_BRANCH }}" ]]; then
          anykernel_branch=${{ github.event.inputs.DEFCONFIG }}
        else
          anykernel_branch=${{ github.event.inputs.ANYKERNEL_BRANCH }}
        fi
        git clone --recursive --depth=1 ${{ github.event.inputs.ANYKERNEL_URL }} -b $anykernel_branch AnyKernel3

        if [ ! -f "Image.gz" ]; then
          echo "Error: Tidak menemukan Image.gz atau Image!"
          exit 1
        fi

        if [ -e "Image.gz" ]; then
          cp -f Image.gz AnyKernel3
          echo "Warning: Don't forget about dtb."
        fi

        name=AnyKernel3-FulmenKernel-${{ github.event.inputs.CODENAME }}${{ fromJSON('["", "-KSU"]')[fromJSON(github.event.inputs.ENABLE_KERNELSU)] }}-$(date +%Y%m%d).zip
        cd AnyKernel3
        zip -q -r $name *
        mv $name ../
        echo "zipname=$name" >> $GITHUB_OUTPUT
      working-directory: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/
      id: anykernel

    - name: Check the output directory before uploading
      run: |
        ls -al ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/

    - uses: actions/upload-artifact@v4
      if: ${{ success() }}
      with:
        name: Image.gz
        path: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/Image.gz

    - name: Send Telegram notification for success
      uses: appleboy/telegram-action@master
      env:
        TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
      if: ${{ success() && steps.anykernel.outputs.zipname != '' && env.TELEGRAM_TO != '' }}
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        disable_web_page_preview: true
        document: ${{ steps.kernel.outputs.kernel-folder }}/out/arch/arm64/boot/${{ steps.anykernel.outputs.zipname }}
        message: |
          <b>${{ steps.workspace.outputs.build_title }}</b>
          <b>✅ Kernel Successfully Build</b>
          
          <b>📱 Device</b>: Redmi Note 10S
          <b>💾 Codename</b>: ${{ github.event.inputs.CODENAME }}
          <b>🏷️ Branch</b>: ${{ github.event.inputs.KERNEL_SOURCE_BRANCH }}
          <b>📦 Zip Name</b>: ${{ steps.anykernel.outputs.zipname }}
          <b>⏳ Build Time</b>: ${{ steps.build.outputs.elapsed_time }} seconds.
          <b>🗓️ Date</b>: ${{ steps.workspace.outputs.current_date }}
          <b>☯️ KernelSU</b>: ${{ steps.workspace.outputs.kernelsu }}
          
          Build by @aditovayo
          
          <b>Kernel Source</b>: ${{ github.event.inputs.KERNEL_SOURCE }}
          <b>Action</b>: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
        format: html

    - name: Send Telegram notification for failure
      uses: appleboy/telegram-action@master
      env:
        TELEGRAM_TO: ${{ secrets.TELEGRAM_TO }}
      if: ${{ failure() && env.TELEGRAM_TO != '' }}
      with:
        to: ${{ secrets.TELEGRAM_TO }}
        token: ${{ secrets.TELEGRAM_TOKEN }}
        disable_web_page_preview: true
        document: compile.log
        message: |
          <b>${{ steps.workspace.outputs.build_title }}</b>
          <b>❌ Failed building kernel</b>, check ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }} for more info.
          
          <b>KernelSU</b>: ${{ steps.workspace.outputs.kernelsu }}
        format: html
